package com.github.madeoliveira.x_activity.entities;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
@Table(name = "tb_exercise")
public class Exercise implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	Long id;
	@NotNull(message = "Campo obrigatório!")
	@Size(max = 30, message = "Deve ter no máximo {max} caraquiteres. " + "Você digitou " + "${validatedValue}")
	String name;
	@NotNull(message = "Campo obrigatório!")
	@Size(max = 300, message = "Deve ter no máximo {max} caraquiteres. " + "Você digitou " + "${validatedValue}")
	String description;
	@ManyToMany
	@JoinTable(name = "tb_exercise_group", joinColumns = @JoinColumn(name = "exercise_id"), inverseJoinColumns = @JoinColumn(name = "group_id"))
	private Set<Group> groups = new HashSet<>();
	@OneToMany(mappedBy = "id.exercise")
	private Set<PlannerExercise> exercises = new HashSet<>();

	public Exercise() {
	}

	public Exercise(Long id, String name, String description) {
		super();
		this.id = id;
		this.name = name;
		this.description = description;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Set<Group> getGroups() {
		return groups;
	}

	@JsonIgnore
	public Set<Planner> getPlanners() {
		Set<Planner> set = new HashSet<>();
		for (PlannerExercise x : exercises) {
			set.add(x.getPlanner());
		}
		return set;
	}

	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Exercise other = (Exercise) obj;
		return Objects.equals(id, other.id);
	}

}
